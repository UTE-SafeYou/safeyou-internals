{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 109,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{\n  \"tips\": [\n    \"Pass data to this widget in the default model field\",\n    \"Access data in the javascript file using the appsmith.model variable\",\n    \"Create events in the widget and trigger them in the javascript file using appsmith.triggerEvent('eventName')\",\n    \"Access data in CSS as var(--appsmith-model-{property-name})\"\n  ]\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "wjyptys348",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 45,
  "mobileLeftColumn": 23,
  "mobileRightColumn": 46,
  "mobileTopRow": 15,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 19.8125,
  "parentId": "x3ejcf9spq",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 63,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n/* .app - Đảm bảo nó chiếm toàn bộ màn hình và bản đồ có thể nằm dưới các phần tử khác */\n.app {\n  position: relative; /* Cần position relative để các phần tử con như search-bar có thể định vị tuyệt đối */\n  top: 0;\n  left: 0;\n  width: 100vw; /* Chiếm toàn bộ chiều rộng màn hình */\n  height: 100vh; /* Chiếm toàn bộ chiều cao màn hình */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0px;\n  border: none;\n}\n\n/* Tạo không gian cho map */\n#map {\n  position: absolute; /* Đảm bảo map không bị chặn */\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; /* Đảm bảo bản đồ chiếm toàn bộ màn hình */\n  z-index: 0; /* Đặt bản đồ dưới search-bar */\n}\n\n/* .search-bar - Đảm bảo nó nằm trên bản đồ */\n.search-bar {\n  position: absolute;\n  top: 10px; /* Khoảng cách từ trên xuống */\n  left: 50%;\n  transform: translateX(-50%); /* Căn giữa chính xác */\n  background: rgba(255, 255, 255, 0.7); /* Nền trong suốt với một chút màu trắng */\n  padding: 10px;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 300px; /* Chiều rộng của search-bar */\n  z-index: 1; /* Đảm bảo search-bar nằm trên bản đồ */\n}\n\n/* Các phần tử trong search-bar */\n.search-bar input {\n  flex-grow: 1; /* Chiếm toàn bộ không gian còn lại */\n  margin-left: 10px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.search-bar button {\n  background-color: transparent;\n  border: none;\n  color: #333;\n  cursor: pointer;\n  padding: 5px;\n}\n\n.search-bar i {\n  font-size: 18px;\n}",
    "html": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Code use case SoSMap</title>\n\t\t<script src='https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.js'></script>\n\t\t<link href='https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.css' rel='stylesheet' />\n\t\t<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.3/css/all.css\"\n\t\t\t\t\tintegrity=\"sha384-SZXxX4whJ79/gErwcOYf+zWLeJdY/qpuqC4cAa9rOGUstPomtqpuNWT9wdPEn2fk\" crossorigin=\"anonymous\">\n\t\t<link rel=\"stylesheet\" href=\"test.css\" />\n\t\t<style>\n\t\t\t@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');\n\t\t</style>\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.min.js\"></script>\n\t\t<link href=\"https://cdn.jsdelivr.net/npm/@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.css\" rel=\"stylesheet\"\n\t\t\t\t\ttype=\"text/css\" />\n\n\t\t<!-- Promise polyfill script is required -->\n\t\t<!-- to use Goong Geocoder in IE 11. -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js\"></script>\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js\"></script>\n\t</head>\n\n\t<body>\n\t\t<div id='map'></div>\n\t\t<div class=\"panel panel-top\">\n\t\t\t<div class=\"search-bar\">\n\t\t\t\t<button class=\"btn btn-icon btn-light\"><i class=\"fas fa-bars\"></i></button>\n\t\t\t\t<input type=\"text\" name=\"\" id=\"searchInput\" placeholder=\"Tìm kiếm...\">\n\t\t\t\t<button class=\"btn btn-icon btn-light\"><i class=\"fas fa-info-circle\"></i></button>\n\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"root\" class=\"app\"></div>\n\t</body>\n\n\n</html>\n",
    "js": "import React, { useEffect, useRef } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport goong_js from 'https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/+esm';\nconst GoongMap = () => {\n  const mapContainer = useRef(null);\n  useEffect(() => {\n    // Add this at the start of your script\n    let globalGeojsonData = null;\n    let globalCircleFeatures = null;\n\n    // Set your goong mapbox access token\n    goong_js.accessToken = 'mQn3EXqA6N5UrnTUr72TgItlg0yzPHxavSEmK2JE';\n    var map = new goong_js.Map({\n      container: 'root',\n      style: 'https://tiles.goong.io/assets/goong_map_web.json',\n      // stylesheet location\n      center: [108.212, 16.068],\n      // starting position [lng, lat]\n      zoom: 5 // starting zoom\n    });\n    //nút zoom\n    var zoom = new goong_js.NavigationControl({\n      showCompass: false // Ẩn button la bàn\n    });\n    //nút định vị\n    var getLocal = new goong_js.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true,\n        // Bật chế độ định vị với độ chính xác cao\n        timeout: 6000\n      },\n      trackUserLocation: true,\n      // Hiển thị vị trí người dùng liên tục nghĩa là họ di chuyển cũng sẽ hiển thị\n      showUserLocation: true\n    });\n    map.addControl(getLocal, 'bottom-right');\n    map.addControl(zoom, 'bottom-right');\n    var geoCoder = new GoongGeocoder({\n      accessToken: 'your_api_token',\n      goong_js: goong_js\n    });\n\n    // Add the control to the map.\n    //map.addControl(geoCoder);\n\n    // Modify the search input handler\n    document.getElementById('searchInput').addEventListener('input', function (e) {\n      if (!globalGeojsonData) return; // Guard clause if data isn't loaded yet\n\n      const searchTerm = e.target.value.toLowerCase();\n\n      // Filter features based on place_type\n      const filteredFeatures = globalGeojsonData.features.filter(feature => feature.properties.place_type.toLowerCase().includes(searchTerm));\n\n      // Filter circle features to match\n      const filteredCircles = globalCircleFeatures.filter(circle => circle.properties.place_type.toLowerCase().includes(searchTerm));\n\n      // Update points on map\n      map.getSource('places').setData({\n        type: 'FeatureCollection',\n        features: searchTerm ? filteredFeatures : globalGeojsonData.features\n      });\n\n      // Update circles on map\n      map.getSource('circles').setData({\n        type: 'FeatureCollection',\n        features: searchTerm ? filteredCircles : globalCircleFeatures\n      });\n    });\n    map.on('load', function () {\n      // Add circle creation helper function at the start\n      function createCircle(center, radiusInMeters) {\n        const points = 64;\n        const coords = [];\n        for (let i = 0; i < points; i++) {\n          const angle = i / points * (2 * Math.PI);\n          const radius = radiusInMeters / 111300; // convert meters to degrees\n          coords.push([center[0] + radius * Math.cos(angle), center[1] + radius * Math.sin(angle)]);\n        }\n        coords.push(coords[0]); // close the circle\n        return coords;\n      }\n      fetch('https://zwdaqmfqjaccijhrkbfl.supabase.co/rest/v1/place', {\n        method: \"GET\",\n        headers: {\n          'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3ZGFxbWZxamFjY2lqaHJrYmZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI5NDEyNzIsImV4cCI6MjA0ODUxNzI3Mn0.bpDrWBpWfkf4yfeUJUFq4mdHE145BPolSOyoLbk2ZPM',\n          'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3ZGFxbWZxamFjY2lqaHJrYmZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI5NDEyNzIsImV4cCI6MjA0ODUxNzI3Mn0.bpDrWBpWfkf4yfeUJUFq4mdHE145BPolSOyoLbk2ZPM',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        // Store the converted data globally\n        globalGeojsonData = {\n          type: 'FeatureCollection',\n          features: data.map(place => ({\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [place.longitude, place.lattitude] // Dùng tọa độ longitude, latitude\n            },\n            properties: {\n              id: place.id,\n              place_type: place.place_type,\n              radius: place.radius,\n              location: place.location,\n              additional_info: place.additional_info\n            }\n          }))\n        };\n\n        // Store circle features globally\n        globalCircleFeatures = data.map(place => ({\n          type: 'Feature',\n          geometry: {\n            type: 'Polygon',\n            coordinates: [createCircle([place.longitude, place.lattitude], place.radius || 100)]\n          },\n          properties: {\n            id: place.id,\n            place_type: place.place_type\n          }\n        }));\n\n        // Initialize sources with full data\n        map.addSource('places', {\n          type: 'geojson',\n          data: globalGeojsonData,\n          cluster: true,\n          clusterMaxZoom: 14,\n          clusterRadius: 50\n        });\n\n        // Add circles source with all circles\n        map.addSource('circles', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: globalCircleFeatures\n          }\n        });\n        console.log(globalGeojsonData);\n\n        // Các thao tác thêm layer sau khi thêm nguồn dữ liệu\n        map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          // Use step expressions (https://docs.goong.io/style-spec/#expressions-step)\n          // with three steps to implement three types of circles:\n          //   * Blue, 20px circles when point count is less than 100\n          //   * Yellow, 30px circles when point count is between 100 and 750\n          //   * Pink, 40px circles when point count is greater than or equal to 750\n\n          paint: {\n            'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 50, '#f1f075', 100, '#f28cb1'],\n            'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n          }\n        });\n        map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'places',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['Roboto Regular'],\n            'text-size': 12\n          }\n        });\n        map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'places',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': ['match', ['get', 'place_type'], 'an toàn', '#28a745',\n            // Màu xanh cho 'an toàn'\n            'cứu trợ', '#ffc107',\n            // Màu vàng cho 'cứu trợ'\n            'thiên tai', '#dc3545',\n            // Màu đỏ cho 'thiên tai'\n            '#6c757d' // Màu xám cho các loại khác\n            ],\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n        map.addLayer({\n          id: 'circle-fill',\n          type: 'fill',\n          source: 'circles',\n          paint: {\n            'fill-color': '#088',\n            'fill-opacity': 0.2\n          }\n        });\n        map.addLayer({\n          id: 'circle-outline',\n          type: 'line',\n          source: 'circles',\n          paint: {\n            'line-color': '#088',\n            'line-width': 2\n          }\n        });\n\n        //Truy cập vào một cụm (cluster) để xem dữ liệu chi tiết hơn\n        // inspect a cluster on click\n        map.on('click', 'clusters', function (e) {\n          var features = map.queryRenderedFeatures(e.point, {\n            layers: ['clusters']\n          });\n          var clusterId = features[0].properties.cluster_id;\n          map.getSource('places').getClusterExpansionZoom(clusterId, function (err, zoom) {\n            if (err) return;\n            map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          });\n        });\n\n        //Hiển thị popup khi ấn vào một điểm dữ liệu. Và đảm bảo sự chính xác của vị trí popup hiển thị khi zoom to/nhỏ bản đồ\n        map.on('click', 'unclustered-point', function (e) {\n          var coordinates = e.features[0].geometry.coordinates.slice();\n          var placeType = e.features[0].properties.place_type; // Tên loại địa điểm\n          var additionalInfo = JSON.parse(e.features[0].properties.additional_info);\n          // Lấy ghi chú từ additional_info, nếu không có thì mặc định là 'Không có ghi chú'\n          // var note = additionalInfo && additionalInfo.note ? additionalInfo.note : 'Không có ghi chú'\n\n          let additional = '';\n          for (const [key, value] of Object.entries(additionalInfo)) {\n            // console.log(`${key}: ${value}`);\n            additional += `${key}: ${value}<br>`;\n          }\n          var radius = e.features[0].properties.radius || 100; // default to 100m if no radius\n\n          // Đảm bảo rằng nếu bản đồ bị thu nhỏ khiến nhiều bản sao của địa điểm hiển thị, popup sẽ hiển thị trên bản sao được click vào\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          }\n\n          // Only show popup\n          new goong_js.Popup().setLngLat(coordinates).setHTML(`Loại địa điểm: ${placeType}<br>\n                                ${additional}\n                                Bán kính: ${radius || 0} m`).addTo(map);\n          map.on('mouseenter', 'clusters', function () {\n            map.getCanvas().style.cursor = 'pointer';\n          });\n          map.on('mouseleave', 'clusters', function () {\n            map.getCanvas().style.cursor = '';\n          });\n        });\n      }).catch(error => {\n        console.log('Error fetching data:', error);\n      });\n    });\n  }, []); // Empty dependency array ensures this effect runs once after the first render\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  });\n};\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(GoongMap, null), document.getElementById('root'));\n});\nexport default GoongMap;"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 39,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* .app - Đảm bảo nó chiếm toàn bộ màn hình và bản đồ có thể nằm dưới các phần tử khác */\n.app {\n  position: relative; /* Cần position relative để các phần tử con như search-bar có thể định vị tuyệt đối */\n  top: 0;\n  left: 0;\n  width: 100vw; /* Chiếm toàn bộ chiều rộng màn hình */\n  height: 100vh; /* Chiếm toàn bộ chiều cao màn hình */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 0px;\n  border: none;\n}\n\n/* Tạo không gian cho map */\n#map {\n  position: absolute; /* Đảm bảo map không bị chặn */\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%; /* Đảm bảo bản đồ chiếm toàn bộ màn hình */\n  z-index: 0; /* Đặt bản đồ dưới search-bar */\n}\n\n/* .search-bar - Đảm bảo nó nằm trên bản đồ */\n.search-bar {\n  position: absolute;\n  top: 10px; /* Khoảng cách từ trên xuống */\n  left: 50%;\n  transform: translateX(-50%); /* Căn giữa chính xác */\n  background: rgba(255, 255, 255, 0.7); /* Nền trong suốt với một chút màu trắng */\n  padding: 10px;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 300px; /* Chiều rộng của search-bar */\n  z-index: 1; /* Đảm bảo search-bar nằm trên bản đồ */\n}\n\n/* Các phần tử trong search-bar */\n.search-bar input {\n  flex-grow: 1; /* Chiếm toàn bộ không gian còn lại */\n  margin-left: 10px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.search-bar button {\n  background-color: transparent;\n  border: none;\n  color: #333;\n  cursor: pointer;\n  padding: 5px;\n}\n\n.search-bar i {\n  font-size: 18px;\n}\n",
    "html": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Code use case SoSMap</title>\n\t\t<script src='https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.js'></script>\n\t\t<link href='https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/dist/goong-js.css' rel='stylesheet' />\n\t\t<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.15.3/css/all.css\"\n\t\t\t\t\tintegrity=\"sha384-SZXxX4whJ79/gErwcOYf+zWLeJdY/qpuqC4cAa9rOGUstPomtqpuNWT9wdPEn2fk\" crossorigin=\"anonymous\">\n\t\t<link rel=\"stylesheet\" href=\"test.css\" />\n\t\t<style>\n\t\t\t@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap');\n\t\t</style>\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.min.js\"></script>\n\t\t<link href=\"https://cdn.jsdelivr.net/npm/@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.css\" rel=\"stylesheet\"\n\t\t\t\t\ttype=\"text/css\" />\n\n\t\t<!-- Promise polyfill script is required -->\n\t\t<!-- to use Goong Geocoder in IE 11. -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js\"></script>\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js\"></script>\n\t</head>\n\n\t<body>\n\t\t<div id='map'></div>\n\t\t<div class=\"panel panel-top\">\n\t\t\t<div class=\"search-bar\">\n\t\t\t\t<button class=\"btn btn-icon btn-light\"><i class=\"fas fa-bars\"></i></button>\n\t\t\t\t<input type=\"text\" name=\"\" id=\"searchInput\" placeholder=\"Tìm kiếm...\">\n\t\t\t\t<button class=\"btn btn-icon btn-light\"><i class=\"fas fa-info-circle\"></i></button>\n\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"root\" class=\"app\"></div>\n\t</body>\n\n\n</html>\n",
    "js": "import React, { useEffect, useRef } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport goong_js from 'https://cdn.jsdelivr.net/npm/@goongmaps/goong-js@1.0.9/+esm';\n\nconst GoongMap = () => {\n\tconst mapContainer = useRef(null);\n\n\tuseEffect(() => {\n\t\t// Add this at the start of your script\n\t\tlet globalGeojsonData = null;\n\t\tlet globalCircleFeatures = null;\n\n\t\t// Set your goong mapbox access token\n\t\tgoong_js.accessToken = 'mQn3EXqA6N5UrnTUr72TgItlg0yzPHxavSEmK2JE';\n\t\tvar map = new goong_js.Map({\n\t\t\tcontainer: 'root',\n\t\t\tstyle: 'https://tiles.goong.io/assets/goong_map_web.json', // stylesheet location\n\t\t\tcenter: [108.212, 16.068], // starting position [lng, lat]\n\t\t\tzoom: 5 // starting zoom\n\t\t});\n\t\t//nút zoom\n\t\tvar zoom = new goong_js.NavigationControl(\n\t\t\t{\n\t\t\t\tshowCompass: false, // Ẩn button la bàn\n\t\t\t});\n\t\t//nút định vị\n\t\tvar getLocal = new goong_js.GeolocateControl(\n\t\t\t{\n\t\t\t\tpositionOptions: {\n\t\t\t\t\tenableHighAccuracy: true, // Bật chế độ định vị với độ chính xác cao\n\t\t\t\t\ttimeout: 6000\n\t\t\t\t},\n\t\t\t\ttrackUserLocation: true, // Hiển thị vị trí người dùng liên tục nghĩa là họ di chuyển cũng sẽ hiển thị\n\t\t\t\tshowUserLocation: true\n\t\t\t})\n\n\t\tmap.addControl(getLocal, 'bottom-right');\n\t\tmap.addControl(zoom, 'bottom-right');\n\n\t\tvar geoCoder = new GoongGeocoder({\n\t\t\taccessToken: 'your_api_token',\n\t\t\tgoong_js: goong_js\n\t\t})\n\n\t\t// Add the control to the map.\n\t\t//map.addControl(geoCoder);\n\n\t\t// Modify the search input handler\n\t\tdocument.getElementById('searchInput').addEventListener('input', function (e) {\n\t\t\tif (!globalGeojsonData) return; // Guard clause if data isn't loaded yet\n\n\t\t\tconst searchTerm = e.target.value.toLowerCase();\n\n\t\t\t// Filter features based on place_type\n\t\t\tconst filteredFeatures = globalGeojsonData.features.filter(feature => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t feature.properties.place_type.toLowerCase().includes(searchTerm)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t// Filter circle features to match\n\t\t\tconst filteredCircles = globalCircleFeatures.filter(circle => \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcircle.properties.place_type.toLowerCase().includes(searchTerm)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t );\n\n\t\t\t// Update points on map\n\t\t\tmap.getSource('places').setData({\n\t\t\t\ttype: 'FeatureCollection',\n\t\t\t\tfeatures: searchTerm ? filteredFeatures : globalGeojsonData.features\n\t\t\t});\n\n\t\t\t// Update circles on map\n\t\t\tmap.getSource('circles').setData({\n\t\t\t\ttype: 'FeatureCollection',\n\t\t\t\tfeatures: searchTerm ? filteredCircles : globalCircleFeatures\n\t\t\t});\n\t\t});\n\n\t\tmap.on('load', function () {\n\n\t\t\t// Add circle creation helper function at the start\n\t\t\tfunction createCircle(center, radiusInMeters) {\n\t\t\t\tconst points = 64;\n\t\t\t\tconst coords = [];\n\t\t\t\tfor (let i = 0; i < points; i++) {\n\t\t\t\t\tconst angle = (i / points) * (2 * Math.PI);\n\t\t\t\t\tconst radius = radiusInMeters / 111300; // convert meters to degrees\n\t\t\t\t\tcoords.push([\n\t\t\t\t\t\tcenter[0] + radius * Math.cos(angle),\n\t\t\t\t\t\tcenter[1] + radius * Math.sin(angle)\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\tcoords.push(coords[0]); // close the circle\n\t\t\t\treturn coords;\n\t\t\t}\n\n\t\t\tfetch('https://zwdaqmfqjaccijhrkbfl.supabase.co/rest/v1/place', {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: {\n\t\t\t\t\t'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3ZGFxbWZxamFjY2lqaHJrYmZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI5NDEyNzIsImV4cCI6MjA0ODUxNzI3Mn0.bpDrWBpWfkf4yfeUJUFq4mdHE145BPolSOyoLbk2ZPM',\n\t\t\t\t\t'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3ZGFxbWZxamFjY2lqaHJrYmZsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI5NDEyNzIsImV4cCI6MjA0ODUxNzI3Mn0.bpDrWBpWfkf4yfeUJUFq4mdHE145BPolSOyoLbk2ZPM',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => {\n\t\t\t\t// Store the converted data globally\n\t\t\t\tglobalGeojsonData = {\n\t\t\t\t\ttype: 'FeatureCollection',\n\t\t\t\t\tfeatures: data.map(place => ({\n\t\t\t\t\t\ttype: 'Feature',\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\ttype: 'Point',\n\t\t\t\t\t\t\tcoordinates: [place.longitude, place.lattitude] // Dùng tọa độ longitude, latitude\n\t\t\t\t\t\t},\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tid: place.id,\n\t\t\t\t\t\t\tplace_type: place.place_type,\n\t\t\t\t\t\t\tradius: place.radius,\n\t\t\t\t\t\t\tlocation: place.location,\n\t\t\t\t\t\t\tadditional_info: place.additional_info\n\t\t\t\t\t\t}\n\t\t\t\t\t}))\n\t\t\t\t};\n\n\t\t\t\t// Store circle features globally\n\t\t\t\tglobalCircleFeatures = data.map(place => ({\n\t\t\t\t\ttype: 'Feature',\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\ttype: 'Polygon',\n\t\t\t\t\t\tcoordinates: [createCircle([place.longitude, place.lattitude], place.radius || 100)]\n\t\t\t\t\t},\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tid: place.id,\n\t\t\t\t\t\tplace_type: place.place_type\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// Initialize sources with full data\n\t\t\t\tmap.addSource('places', {\n\t\t\t\t\ttype: 'geojson',\n\t\t\t\t\tdata: globalGeojsonData,\n\t\t\t\t\tcluster: true,\n\t\t\t\t\tclusterMaxZoom: 14,\n\t\t\t\t\tclusterRadius: 50\n\t\t\t\t});\n\n\t\t\t\t// Add circles source with all circles\n\t\t\t\tmap.addSource('circles', {\n\t\t\t\t\ttype: 'geojson',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttype: 'FeatureCollection',\n\t\t\t\t\t\tfeatures: globalCircleFeatures\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tconsole.log(globalGeojsonData);\n\n\t\t\t\t// Các thao tác thêm layer sau khi thêm nguồn dữ liệu\n\t\t\t\tmap.addLayer({\n\t\t\t\t\tid: 'clusters',\n\t\t\t\t\ttype: 'circle',\n\t\t\t\t\tsource: 'places',\n\t\t\t\t\tfilter: ['has', 'point_count'],\n\t\t\t\t\t// Use step expressions (https://docs.goong.io/style-spec/#expressions-step)\n\t\t\t\t\t// with three steps to implement three types of circles:\n\t\t\t\t\t//   * Blue, 20px circles when point count is less than 100\n\t\t\t\t\t//   * Yellow, 30px circles when point count is between 100 and 750\n\t\t\t\t\t//   * Pink, 40px circles when point count is greater than or equal to 750\n\n\t\t\t\t\tpaint: {\n\t\t\t\t\t\t'circle-color': [\n\t\t\t\t\t\t\t'step',\n\t\t\t\t\t\t\t['get', 'point_count'],\n\t\t\t\t\t\t\t'#51bbd6',\n\t\t\t\t\t\t\t50, '#f1f075',\n\t\t\t\t\t\t\t100, '#f28cb1'\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'circle-radius': [\n\t\t\t\t\t\t\t'step',\n\t\t\t\t\t\t\t['get', 'point_count'],\n\t\t\t\t\t\t\t20,\n\t\t\t\t\t\t\t100, 30,\n\t\t\t\t\t\t\t750, 40\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmap.addLayer({\n\t\t\t\t\tid: 'cluster-count',\n\t\t\t\t\ttype: 'symbol',\n\t\t\t\t\tsource: 'places',\n\t\t\t\t\tfilter: ['has', 'point_count'],\n\t\t\t\t\tlayout: {\n\t\t\t\t\t\t'text-field': '{point_count_abbreviated}',\n\t\t\t\t\t\t'text-font': ['Roboto Regular'],\n\t\t\t\t\t\t'text-size': 12\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmap.addLayer({\n\t\t\t\t\tid: 'unclustered-point',\n\t\t\t\t\ttype: 'circle',\n\t\t\t\t\tsource: 'places',\n\t\t\t\t\tfilter: ['!', ['has', 'point_count']],\n\t\t\t\t\tpaint: {\n\t\t\t\t\t\t'circle-color': [\n\t\t\t\t\t\t\t'match',\n\t\t\t\t\t\t\t['get', 'place_type'],\n\t\t\t\t\t\t\t'an toàn', '#28a745',  // Màu xanh cho 'an toàn'\n\t\t\t\t\t\t\t'cứu trợ', '#ffc107',  // Màu vàng cho 'cứu trợ'\n\t\t\t\t\t\t\t'thiên tai', '#dc3545', // Màu đỏ cho 'thiên tai'\n\t\t\t\t\t\t\t'#6c757d'  // Màu xám cho các loại khác\n\t\t\t\t\t\t],\n\t\t\t\t\t\t'circle-radius': 6,\n\t\t\t\t\t\t'circle-stroke-width': 1,\n\t\t\t\t\t\t'circle-stroke-color': '#fff'\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmap.addLayer({\n\t\t\t\t\tid: 'circle-fill',\n\t\t\t\t\ttype: 'fill',\n\t\t\t\t\tsource: 'circles',\n\t\t\t\t\tpaint: {\n\t\t\t\t\t\t'fill-color': '#088',\n\t\t\t\t\t\t'fill-opacity': 0.2\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmap.addLayer({\n\t\t\t\t\tid: 'circle-outline',\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tsource: 'circles',\n\t\t\t\t\tpaint: {\n\t\t\t\t\t\t'line-color': '#088',\n\t\t\t\t\t\t'line-width': 2\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//Truy cập vào một cụm (cluster) để xem dữ liệu chi tiết hơn\n\t\t\t\t// inspect a cluster on click\n\t\t\t\tmap.on('click', 'clusters', function (e) {\n\t\t\t\t\tvar features = map.queryRenderedFeatures(e.point, {\n\t\t\t\t\t\tlayers: ['clusters']\n\t\t\t\t\t});\n\t\t\t\t\tvar clusterId = features[0].properties.cluster_id;\n\t\t\t\t\tmap.getSource('places').getClusterExpansionZoom(\n\t\t\t\t\t\tclusterId,\n\t\t\t\t\t\tfunction (err, zoom) {\n\t\t\t\t\t\t\tif (err) return;\n\n\t\t\t\t\t\t\tmap.easeTo({\n\t\t\t\t\t\t\t\tcenter: features[0].geometry.coordinates,\n\t\t\t\t\t\t\t\tzoom: zoom\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\t//Hiển thị popup khi ấn vào một điểm dữ liệu. Và đảm bảo sự chính xác của vị trí popup hiển thị khi zoom to/nhỏ bản đồ\n\t\t\t\tmap.on('click', 'unclustered-point', function (e) {\n\t\t\t\t\tvar coordinates = e.features[0].geometry.coordinates.slice();\n\t\t\t\t\tvar placeType = e.features[0].properties.place_type; // Tên loại địa điểm\n\t\t\t\t\tvar additionalInfo = JSON.parse(e.features[0].properties.additional_info);\n\t\t\t\t\t// Lấy ghi chú từ additional_info, nếu không có thì mặc định là 'Không có ghi chú'\n\t\t\t\t\t// var note = additionalInfo && additionalInfo.note ? additionalInfo.note : 'Không có ghi chú'\n\n\t\t\t\t\tlet additional = '';\n\t\t\t\t\tfor (const [key, value] of Object.entries(additionalInfo)) {\n\t\t\t\t\t\t// console.log(`${key}: ${value}`);\n\t\t\t\t\t\tadditional += `${key}: ${value}<br>`;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar radius = e.features[0].properties.radius || 100; // default to 100m if no radius\n\n\t\t\t\t\t// Đảm bảo rằng nếu bản đồ bị thu nhỏ khiến nhiều bản sao của địa điểm hiển thị, popup sẽ hiển thị trên bản sao được click vào\n\t\t\t\t\twhile (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n\t\t\t\t\t\tcoordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only show popup\n\t\t\t\t\tnew goong_js.Popup()\n\t\t\t\t\t\t.setLngLat(coordinates)\n\t\t\t\t\t\t.setHTML(\n\t\t\t\t\t\t`Loại địa điểm: ${placeType}<br>\n                                ${additional}\n                                Bán kính: ${radius || 0} m`\n\t\t\t\t\t)\n\t\t\t\t\t\t.addTo(map);\n\t\t\t\t\tmap.on('mouseenter', 'clusters', function () {\n\t\t\t\t\t\tmap.getCanvas().style.cursor = 'pointer';\n\t\t\t\t\t});\n\t\t\t\t\tmap.on('mouseleave', 'clusters', function () {\n\t\t\t\t\t\tmap.getCanvas().style.cursor = '';\n\t\t\t\t\t});\n\n\n\t\t\t\t});\n\n\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\tconsole.log('Error fetching data:', error);\n\t\t\t});\n\n\t\t});\n\n\t}, []); // Empty dependency array ensures this effect runs once after the first render\n\n\treturn (\n\t\t<div ref={mapContainer} style={{ width: '100%', height: '100%' }} />\n);\n};\n\nappsmith.onReady(() => {\n\treactDom.render(<GoongMap />, document.getElementById('root'));\n});\n\nexport default GoongMap;\n"
  },
  "version": 1,
  "widgetId": "f1ovryqeg4",
  "widgetName": "Custom1"
}