{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 57,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{{\n\tGOONG_API_URL: 'https://rsapi.goong.io',\n\tGOONG_MAP_URL: 'https://tiles.goong.io/assets/',\n\tMAPBOX_ACCESS_TOKEN: 'pk.eyJ1IjoidGN0b2FuMTAyNCIsImEiOiJjbTQ3dWRzN2wwOW4zMmtvbjVtajN5MHJvIn0.MOyUsBtVxpENoy3jYjiLLw',\n\tGOONG_API_KEY: '2GE2CBLMj5bdGsEuJhQrmBQ9dXMTDE35xfx1aR2B',\n\tGOONG_MAP_TILES_API_KEY: 'mQn3EXqA6N5UrnTUr72TgItlg0yzPHxavSEmK2JE',\t\n\tlocationState: appsmith.store.locationState,\n\tcurrentRadius: radiusInput.text,\n\tcurrentPlaces: appsmith.store.issuePlace\n}}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [
    {
      "key": "onUpdateLocation"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onUpdateLocation"
    },
    {
      "key": "onLocationStateUpdate"
    }
  ],
  "events": [
    "onUpdateLocation",
    "onLocationStateUpdate"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "tnwdgik8ak",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 55,
  "mobileLeftColumn": 10,
  "mobileRightColumn": 33,
  "mobileTopRow": 25,
  "needsErrorInfo": false,
  "onLocationStateUpdate": "{{locationControlObject.updateLocationState(lat, lon);}}",
  "onUpdateLocation": "{{goong_service.reverseGeocoder()}}",
  "originalBottomRow": 76,
  "originalTopRow": 27,
  "parentColumnSpace": 24.7203125,
  "parentId": "1jm3m82ctf",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 30,
  "srcDoc": {
    "css": "@import url(\"https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\");\n* {\n  font-family: \"Roboto\", sans-serif;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\n\n.search-box {\n  position: absolute;\n  top: 30px;\n  left: 60px;\n  display: flex;\n  align-items: center;\n}\n\n.color-white {\n  color: white;\n  /* width: 70px; */\n  /* height: 35px; */\n}\n\n.search-box-input {\n  width: 350px;\n  min-height: 35px;\n  border-left: none;\n  padding: 1px 8px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);\n  outline: none;\n  border-radius: 2px 0 0 2px;\n  border: 1px solid transparent;\n}\n\n.search-box-btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 39px;\n  background-color: #fdffff;\n  box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.1);\n  /* border-radius: 0 2px 2px 0; */\n  cursor: pointer;\n  /* border-left: 1px solid #cccece; */\n}\n\n.clear-box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 20px;\n  height: 39px;\n  background-color: #fdffff;\n  box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  /* border-left: 1px solid #cccece; */\n}\n\n.direction-box-btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 39px;\n  background-color: #fdffff;\n  box-shadow: 1px 1px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 0 2px 2px 0;\n  cursor: pointer;\n  border-left: 1px solid #cccece;\n}\n\n.search-result {\n  position: absolute;\n  top: 44px;\n  width: 432px;\n  background-color: white;\n  box-shadow: inset 1px 1px 0 rgba(0, 0, 0, 0.1), inset 0 -1px 0 rgba(0, 0, 0, 0.07);\n  z-index: 2;\n  border-radius: 2px;\n  padding: 8px;\n  display: none;\n}\n\n.result-box {\n  width: 100%;\n  cursor: pointer;\n  margin: 0 0 8px 0;\n}\n\n.result-box:hover {\n  background-color: rgb(221, 221, 221);\n}\n\n.display-none {\n  display: none;\n}\n\n.input-direction-container {\n  /* margin: 30px 0; */\n  position: absolute;\n  display: none;\n  left: 60px;\n  top: 30px;\n}\n\n.close-directions {\n  margin-left: 10px;\n}\n\n.direction {\n  width: 100px;\n  height: 40px;\n}\n\n.search-box-direction {\n  width: 350px;\n  height: 35px;\n  border-left: none;\n  padding: 1px 8px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);\n  outline: none;\n  border-radius: 2px 0 0 2px;\n  border: 1px solid transparent;\n}\n\n#start,\n#end {\n  width: 300px;\n  /* padding: 15px; */\n  margin-right: 10px;\n  /* margin-left: 10px; */\n}\n\n#get-directions {\n  padding: 5px 10px;\n}\n\n#coordinates {\n  background: rgba(0, 0, 0, 0.5);\n  color: #fff;\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  padding: 5px 10px;\n  margin: 0;\n  font-size: 11px;\n  line-height: 18px;\n  border-radius: 3px;\n  display: none;\n}\n\n.popover-button {\n  position: absolute;\n  padding: 10px;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  display: inline-block;\n  background-color: #f9f9f9;\n  left: 60px;\n  top: 80px;\n  width: 95px;\n}\n\n.popover {\n  left: 60px;\n  top: 125px;\n  display: none;\n  position: absolute;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  padding: 10px;\n  z-index: 1000;\n}\n\n.popover .map-style-option {\n  padding: 10px;\n  cursor: pointer;\n  border-bottom: 1px solid #eee;\n}\n\n.popover .map-style-option:last-child {\n  border-bottom: none;\n}\n\n.popover .map-style-option:hover {\n  background-color: #f1f1f1;\n}\n\n.search-result-start {\n  position: absolute;\n  top: 44px;\n  width: 432px;\n  background-color: white;\n  box-shadow: inset 1px 1px 0 rgba(0, 0, 0, 0.1), inset 0 -1px 0 rgba(0, 0, 0, 0.07);\n  z-index: 2;\n  border-radius: 2px;\n  padding: 8px;\n  display: none;\n}\n\n.search-result-end {\n  position: absolute;\n  top: 44px;\n  width: 432px;\n  background-color: white;\n  box-shadow: inset 1px 1px 0 rgba(0, 0, 0, 0.1), inset 0 -1px 0 rgba(0, 0, 0, 0.07);\n  z-index: 2;\n  border-radius: 2px;\n  padding: 8px;\n  display: none;\n}",
    "html": "<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Guides Web</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1,user-scalable=no\">\n\t\t<link href=\"https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css\" rel=\"stylesheet\">\n\t\t<script src=\"https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"map\"></div>\n\t\t<div class=\"search-box\" id=\"search-container\">\n\t\t\t<input class=\"search-box-input\" id=\"input\" autofocus placeholder=\"Tìm kiếm địa điểm\">\n\t\t\t<div id=\"result\" class=\"search-result\"></div>\n\t\t</div>\n\t\t<script>\n\n\t\t</script>\n\t</body>\n\n</html>\n",
    "js": "appsmith.onReady(() => {\n  const apiUrl = appsmith.model.GOONG_API_URL;\n  const apiKey = appsmith.model.GOONG_API_KEY; // Goong API key\n  const mapKey = appsmith.model.GOONG_MAP_TILES_API_KEY;\n  const accessMapboxToken = appsmith.model.MAPBOX_ACCESS_TOKEN; // Mapbox access token\n  const center = [105.85242472181584, 21.029579719995272]; // Initial map center\n  const zoom = 14;\n  mapboxgl.accessToken = accessMapboxToken;\n  const map = new mapboxgl.Map({\n    container: 'map',\n    style: `https://tiles.goong.io/assets/goong_map_web.json?api_key=${mapKey}`,\n    zoom: zoom,\n    center: center\n  });\n  map.on('load', () => {\n    main();\n  });\n  function main() {\n    function drawCircle(center, radiusInMeters) {\n      const points = 74;\n      const coords = {\n        latitude: center[1],\n        longitude: center[0]\n      };\n      const km = radiusInMeters / 1000;\n      const ret = [];\n      const distanceX = km / (111.320 * Math.cos(coords.latitude * Math.PI / 180));\n      const distanceY = km / 110.574;\n      let theta, x, y;\n      for (let i = 0; i < points; i++) {\n        theta = i / points * (2 * Math.PI);\n        x = distanceX * Math.cos(theta);\n        y = distanceY * Math.sin(theta);\n        ret.push([coords.longitude + x, coords.latitude + y]);\n      }\n      ret.push(ret[0]);\n      return ret;\n    }\n    map.addControl(new mapboxgl.NavigationControl());\n    let currentMarker = null;\n\n    // Function to add the circle to the map (after style is loaded)\n    function addCircle(lngLat, radius) {\n      // Create GeoJSON data for the circle\n      const circleData = {\n        'type': 'FeatureCollection',\n        'features': [{\n          'type': 'Feature',\n          'geometry': {\n            'type': 'Polygon',\n            'coordinates': [drawCircle(lngLat, radius)] // Generate circle coordinates\n          }\n        }]\n      };\n      // \n      // // Check if the source already exists to avoid duplicate sources\n      if (!map.getSource('circle')) {\n        map.addSource('circle', {\n          'type': 'geojson',\n          'data': circleData\n        });\n      } else {\n        // // If the source already exists, update the data (this is useful for dynamic updates)\n        map.getSource('circle').setData(circleData);\n      }\n      // Add the layer for the circle if it hasn't been added yet\n      if (!map.getLayer('circle')) {\n        map.addLayer({\n          'id': 'circle',\n          'type': 'fill',\n          // Use 'fill' for the polygon\n          'source': 'circle',\n          'layout': {},\n          'paint': {\n            'fill-color': '#588888',\n            // Set the circle color\n            'fill-opacity': 0.5 // Set the opacity\n          }\n        });\n      }\n    }\n    // Add or update the circle on model change\n    appsmith.onModelChange(() => {\n      const lngLat = [appsmith.model.locationState.longitude, appsmith.model.locationState.latitude];\n      addMarker(lngLat);\n      map.flyTo({\n        center: lngLat\n      });\n      appsmith.triggerEvent(\"onUpdateLocation\");\n    });\n\n    // Function to add or replace a marker on the map\n    function addMarker(lngLat) {\n      if (currentMarker) {\n        currentMarker.remove(); // Remove existing marker\n      }\n      currentMarker = new mapboxgl.Marker().setLngLat(lngLat).addTo(map);\n\n      // Check if the map style is loaded\n      if (map.isStyleLoaded()) {\n        // Proceed with adding the source and layer if style is loaded\n        addCircle(lngLat, appsmith.model.currentRadius * 1000); // km => meters\n      } else {\n        // If the style is not loaded, wait for it to load\n        map.once('styledata', function () {\n          // Now the style is loaded, proceed with adding the source and layer\n          // addCircle(lngLat, radius);\n        });\n      }\n    }\n\n    // Click event to add marker on the map\n    map.on('click', e => {\n      const {\n        lng,\n        lat\n      } = e.lngLat;\n      appsmith.triggerEvent(\"onLocationStateUpdate\", {\n        lat: lat,\n        lon: lng\n      });\n    });\n\n    // Search input functionality\n    document.getElementById('input').addEventListener('input', function () {\n      const query = this.value;\n      if (query.length >= 2) {\n        fetchDataAutoComplete(query);\n      } else {\n        renderArray([]);\n      }\n    });\n\n    // Function to fetch data from Goong API for search autocomplete\n    function fetchDataAutoComplete(query) {\n      const apiLink = `${apiUrl}/Place/AutoComplete?api_key=${apiKey}&input=${encodeURIComponent(query)}`;\n      fetch(apiLink).then(response => response.json()).then(data => {\n        if (data.predictions) {\n          renderArray(data.predictions);\n        } else {\n          renderArray([]);\n        }\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n        renderArray([]);\n      });\n    }\n\n    // Render autocomplete results\n    function renderArray(data) {\n      const resultContainer = document.getElementById('result');\n      const inputContainer = document.getElementById('input');\n      resultContainer.innerHTML = '';\n      if (data.length > 0) {\n        resultContainer.style.display = 'block';\n      } else {\n        resultContainer.style.display = 'none';\n      }\n      data.forEach(item => {\n        const div = document.createElement('div');\n        div.className = 'result-box';\n        div.textContent = item.description;\n        div.addEventListener('click', function () {\n          fetchPlaceDetails(item.place_id);\n          resultContainer.style.display = 'none';\n          inputContainer.value = item.description;\n        });\n        resultContainer.appendChild(div);\n      });\n    }\n\n    // Fetch details of the place from the Goong API\n    function fetchPlaceDetails(placeId) {\n      const apiLink = `${apiUrl}/Place/Detail?api_key=${apiKey}&place_id=${placeId}`;\n      fetch(apiLink).then(response => response.json()).then(data => {\n        if (data.result) {\n          const {\n            location\n          } = data.result.geometry;\n          const lngLat = [location.lng, location.lat];\n          appsmith.triggerEvent(\"onLocationStateUpdate\", {\n            lat: location.lat,\n            lon: location.lng\n          });\n          addMarker(lngLat); // Add marker at the searched location\n          map.flyTo({\n            center: lngLat,\n            zoom: 14\n          });\n        } else {\n          console.error('No result found for place details');\n        }\n      }).catch(error => {\n        console.error('Error fetching place details:', error);\n      });\n    }\n  }\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 4,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "@import url('https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n* {\n\tfont-family: \"Roboto\", sans-serif;\n}\nbody {\n\tmargin: 0;\n\tpadding: 0;\n}\n\n#map {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\twidth: 100%;\n}\n\n.search-box {\n\tposition: absolute;\n\ttop: 30px;\n\tleft: 60px;\n\tdisplay: flex;\n\talign-items: center;\n}\n\n.color-white {\n\tcolor: white;\n\t/* width: 70px; */\n\t/* height: 35px; */\n}\n\n.search-box-input {\n\twidth: 350px;\n\tmin-height: 35px;\n\tborder-left: none;\n\tpadding: 1px 8px;\n\tbox-shadow: 1px 1px 1px rgba(0, 0, 0, .1);\n\toutline: none;\n\tborder-radius: 2px 0 0 2px;\n\tborder: 1px solid transparent;\n}\n\n.search-box-btn {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\twidth: 40px;\n\theight: 39px;\n\tbackground-color: #fdffff;\n\tbox-shadow: 1px 1px 0 rgba(0, 0, 0, .1);\n\t/* border-radius: 0 2px 2px 0; */\n\tcursor: pointer;\n\t/* border-left: 1px solid #cccece; */\n}\n\n.clear-box {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\twidth: 20px;\n\theight: 39px;\n\tbackground-color: #fdffff;\n\tbox-shadow: 1px 1px 0 rgba(0, 0, 0, .1);\n\n\tcursor: pointer;\n\t/* border-left: 1px solid #cccece; */\n}\n\n.direction-box-btn {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\twidth: 40px;\n\theight: 39px;\n\tbackground-color: #fdffff;\n\tbox-shadow: 1px 1px 0 rgba(0, 0, 0, .1);\n\tborder-radius: 0 2px 2px 0;\n\tcursor: pointer;\n\tborder-left: 1px solid #cccece;\n}\n\n.search-result {\n\tposition: absolute;\n\ttop: 44px;\n\twidth: 432px;\n\tbackground-color: white;\n\tbox-shadow: inset 1px 1px 0 rgba(0, 0, 0, .1), inset 0 -1px 0 rgba(0, 0, 0, .07);\n\tz-index: 2;\n\tborder-radius: 2px;\n\tpadding: 8px;\n\tdisplay: none;\n}\n\n.result-box {\n\twidth: 100%;\n\tcursor: pointer;\n\tmargin: 0 0 8px 0;\n}\n\n.result-box:hover {\n\tbackground-color: rgb(221, 221, 221);\n}\n\n.display-none {\n\tdisplay: none;\n}\n\n.input-direction-container {\n\t/* margin: 30px 0; */\n\tposition: absolute;\n\tdisplay: none;\n\tleft: 60px;\n\ttop: 30px\n}\n\n.close-directions {\n\tmargin-left: 10px;\n}\n\n.direction {\n\twidth: 100px;\n\theight: 40px;\n}\n\n.search-box-direction {\n\twidth: 350px;\n\theight: 35px;\n\tborder-left: none;\n\tpadding: 1px 8px;\n\tbox-shadow: 1px 1px 1px rgba(0, 0, 0, .1);\n\toutline: none;\n\tborder-radius: 2px 0 0 2px;\n\tborder: 1px solid transparent;\n}\n\n#start,\n#end {\n\twidth: 300px;\n\t/* padding: 15px; */\n\tmargin-right: 10px;\n\t/* margin-left: 10px; */\n}\n\n#get-directions {\n\tpadding: 5px 10px;\n}\n\n#coordinates {\n\tbackground: rgba(0, 0, 0, 0.5);\n\tcolor: #fff;\n\tposition: absolute;\n\tbottom: 10px;\n\tleft: 10px;\n\tpadding: 5px 10px;\n\tmargin: 0;\n\tfont-size: 11px;\n\tline-height: 18px;\n\tborder-radius: 3px;\n\tdisplay: none;\n}\n\n.popover-button {\n\tposition: absolute;\n\tpadding: 10px;\n\tcursor: pointer;\n\tborder: 1px solid #ccc;\n\tdisplay: inline-block;\n\tbackground-color: #f9f9f9;\n\tleft: 60px;\n\ttop: 80px;\n\twidth: 95px\n}\n\n.popover {\n\tleft: 60px;\n\ttop: 125px;\n\tdisplay: none;\n\tposition: absolute;\n\tbackground-color: #fff;\n\tborder: 1px solid #ccc;\n\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n\tpadding: 10px;\n\tz-index: 1000;\n}\n\n.popover .map-style-option {\n\tpadding: 10px;\n\tcursor: pointer;\n\tborder-bottom: 1px solid #eee;\n}\n\n.popover .map-style-option:last-child {\n\tborder-bottom: none;\n}\n\n.popover .map-style-option:hover {\n\tbackground-color: #f1f1f1;\n}\n\n.search-result-start {\n\tposition: absolute;\n\ttop: 44px;\n\twidth: 432px;\n\tbackground-color: white;\n\tbox-shadow: inset 1px 1px 0 rgba(0, 0, 0, .1), inset 0 -1px 0 rgba(0, 0, 0, .07);\n\tz-index: 2;\n\tborder-radius: 2px;\n\tpadding: 8px;\n\tdisplay: none;\n}\n\n.search-result-end {\n\tposition: absolute;\n\ttop: 44px;\n\twidth: 432px;\n\tbackground-color: white;\n\tbox-shadow: inset 1px 1px 0 rgba(0, 0, 0, .1), inset 0 -1px 0 rgba(0, 0, 0, .07);\n\tz-index: 2;\n\tborder-radius: 2px;\n\tpadding: 8px;\n\tdisplay: none;\n}",
    "html": "<!DOCTYPE html>\n<html>\n\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>Guides Web</title>\n\t\t<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=1,user-scalable=no\">\n\t\t<link href=\"https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css\" rel=\"stylesheet\">\n\t\t<script src=\"https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"map\"></div>\n\t\t<div class=\"search-box\" id=\"search-container\">\n\t\t\t<input class=\"search-box-input\" id=\"input\" autofocus placeholder=\"Tìm kiếm địa điểm\">\n\t\t\t<div id=\"result\" class=\"search-result\"></div>\n\t\t</div>\n\t\t<script>\n\n\t\t</script>\n\t</body>\n\n</html>\n",
    "js": "appsmith.onReady(() => {\n\n\tconst apiUrl = appsmith.model.GOONG_API_URL;\n\tconst apiKey = appsmith.model.GOONG_API_KEY; // Goong API key\n\tconst mapKey = appsmith.model.GOONG_MAP_TILES_API_KEY;\n\tconst accessMapboxToken = appsmith.model.MAPBOX_ACCESS_TOKEN; // Mapbox access token\n\tconst center = [105.85242472181584, 21.029579719995272]; // Initial map center\n\tconst zoom = 14;\n\n\tmapboxgl.accessToken = accessMapboxToken;\n\tconst map = new mapboxgl.Map({\n\t\tcontainer: 'map',\n\t\tstyle: `https://tiles.goong.io/assets/goong_map_web.json?api_key=${mapKey}`,\n\t\tzoom: zoom,\n\t\tcenter: center\n\t});\n\n\tmap.on('load', () => {\n\t\tmain();\n\t})\n\n\tfunction main() {\n\n\n\t\tfunction drawCircle(center, radiusInMeters) {\n\t\t\tconst points = 74;\n\t\t\tconst coords = {\n\t\t\t\tlatitude: center[1],\n\t\t\t\tlongitude: center[0]\n\t\t\t};\n\t\t\tconst km = radiusInMeters / 1000;\n\t\t\tconst ret = [];\n\t\t\tconst distanceX = km / (111.320 * Math.cos(coords.latitude * Math.PI / 180));\n\t\t\tconst distanceY = km / 110.574;\n\t\t\tlet theta, x, y;\n\t\t\tfor (let i = 0; i < points; i++) {\n\t\t\t\ttheta = (i / points) * (2 * Math.PI);\n\t\t\t\tx = distanceX * Math.cos(theta);\n\t\t\t\ty = distanceY * Math.sin(theta);\n\t\t\t\tret.push([coords.longitude + x, coords.latitude + y]);\n\t\t\t}\n\t\t\tret.push(ret[0]);\n\t\t\treturn ret;\n\t\t}\n\n\n\t\tmap.addControl(new mapboxgl.NavigationControl());\n\t\tlet currentMarker = null;\n\n\t\t// Function to add the circle to the map (after style is loaded)\n\t\tfunction addCircle(lngLat, radius) {\n\t\t\t// Create GeoJSON data for the circle\n\t\t\tconst circleData = {\n\t\t\t\t'type': 'FeatureCollection',\n\t\t\t\t'features': [{\n\t\t\t\t\t'type': 'Feature',\n\t\t\t\t\t'geometry': {\n\t\t\t\t\t\t'type': 'Polygon',\n\t\t\t\t\t\t'coordinates': [drawCircle(lngLat, radius)]  // Generate circle coordinates\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t};\n\t\t\t// \n\t\t\t// // Check if the source already exists to avoid duplicate sources\n\t\t\tif (!map.getSource('circle')) {\n\t\t\t\tmap.addSource('circle', {\n\t\t\t\t\t'type': 'geojson',\n\t\t\t\t\t'data': circleData\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// // If the source already exists, update the data (this is useful for dynamic updates)\n\t\t\t\tmap.getSource('circle').setData(circleData);\n\t\t\t}\n\t\t\t// Add the layer for the circle if it hasn't been added yet\n\t\t\tif (!map.getLayer('circle')) {\n\t\t\t\tmap.addLayer({\n\t\t\t\t\t'id': 'circle',\n\t\t\t\t\t'type': 'fill',  // Use 'fill' for the polygon\n\t\t\t\t\t'source': 'circle',\n\t\t\t\t\t'layout': {},\n\t\t\t\t\t'paint': {\n\t\t\t\t\t\t'fill-color': '#588888',  // Set the circle color\n\t\t\t\t\t\t'fill-opacity': 0.5  // Set the opacity\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Add or update the circle on model change\n\t\tappsmith.onModelChange(() => {\n\n\t\t\tconst lngLat = [appsmith.model.locationState.longitude, appsmith.model.locationState.latitude];\n\t\t\taddMarker(lngLat);\n\t\t\tmap.flyTo({\n\t\t\t\tcenter: lngLat\n\t\t\t});\n\t\t\tappsmith.triggerEvent(\"onUpdateLocation\");\n\t\t});\n\n\t\t// Function to add or replace a marker on the map\n\t\tfunction addMarker(lngLat) {\n\t\t\tif (currentMarker) {\n\t\t\t\tcurrentMarker.remove(); // Remove existing marker\n\t\t\t}\n\t\t\tcurrentMarker = new mapboxgl.Marker()\n\t\t\t\t.setLngLat(lngLat)\n\t\t\t\t.addTo(map);\n\n\t\t\t// Check if the map style is loaded\n\t\t\tif (map.isStyleLoaded()) {\n\t\t\t\t// Proceed with adding the source and layer if style is loaded\n\t\t\t\taddCircle(lngLat, appsmith.model.currentRadius * 1000); // km => meters\n\t\t\t} else {\n\t\t\t\t// If the style is not loaded, wait for it to load\n\t\t\t\tmap.once('styledata', function() {\n\t\t\t\t\t// Now the style is loaded, proceed with adding the source and layer\n\t\t\t\t\t// addCircle(lngLat, radius);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\n\t\t// Click event to add marker on the map\n\t\tmap.on('click', (e) => {\n\t\t\tconst { lng, lat } = e.lngLat;\n\t\t\tappsmith.triggerEvent(\"onLocationStateUpdate\", {\n\t\t\t\tlat: lat,\n\t\t\t\tlon: lng\n\t\t\t});\n\t\t});\n\n\t\t// Search input functionality\n\t\tdocument.getElementById('input').addEventListener('input', function () {\n\t\t\tconst query = this.value;\n\t\t\tif (query.length >= 2) {\n\t\t\t\tfetchDataAutoComplete(query);\n\t\t\t} else {\n\t\t\t\trenderArray([]);\n\t\t\t}\n\t\t});\n\n\t\t// Function to fetch data from Goong API for search autocomplete\n\t\tfunction fetchDataAutoComplete(query) {\n\t\t\tconst apiLink = `${apiUrl}/Place/AutoComplete?api_key=${apiKey}&input=${encodeURIComponent(query)}`;\n\t\t\tfetch(apiLink)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => {\n\t\t\t\tif (data.predictions) {\n\t\t\t\t\trenderArray(data.predictions);\n\t\t\t\t} else {\n\t\t\t\t\trenderArray([]);\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error fetching data:', error);\n\t\t\t\trenderArray([]);\n\t\t\t});\n\t\t}\n\n\t\t// Render autocomplete results\n\t\tfunction renderArray(data) {\n\t\t\tconst resultContainer = document.getElementById('result');\n\t\t\tconst inputContainer = document.getElementById('input');\n\t\t\tresultContainer.innerHTML = '';\n\t\t\tif (data.length > 0) {\n\t\t\t\tresultContainer.style.display = 'block';\n\t\t\t} else {\n\t\t\t\tresultContainer.style.display = 'none';\n\t\t\t}\n\t\t\tdata.forEach(item => {\n\t\t\t\tconst div = document.createElement('div');\n\t\t\t\tdiv.className = 'result-box';\n\t\t\t\tdiv.textContent = item.description;\n\t\t\t\tdiv.addEventListener('click', function () {\n\t\t\t\t\tfetchPlaceDetails(item.place_id);\n\t\t\t\t\tresultContainer.style.display = 'none';\n\t\t\t\t\tinputContainer.value = item.description;\n\t\t\t\t});\n\t\t\t\tresultContainer.appendChild(div);\n\t\t\t});\n\t\t}\n\n\t\t// Fetch details of the place from the Goong API\n\t\tfunction fetchPlaceDetails(placeId) {\n\t\t\tconst apiLink = `${apiUrl}/Place/Detail?api_key=${apiKey}&place_id=${placeId}`;\n\t\t\tfetch(apiLink)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => {\n\t\t\t\tif (data.result) {\n\n\n\t\t\t\t\tconst { location } = data.result.geometry;\n\t\t\t\t\tconst lngLat = [location.lng, location.lat];\n\n\t\t\t\t\tappsmith.triggerEvent(\"onLocationStateUpdate\", {\n\t\t\t\t\t\tlat: location.lat,\n\t\t\t\t\t\tlon: location.lng\n\t\t\t\t\t});\n\n\t\t\t\t\taddMarker(lngLat); // Add marker at the searched location\n\t\t\t\t\tmap.flyTo({ center: lngLat, zoom: 14 });\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('No result found for place details');\n\t\t\t\t}\n\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\tconsole.error('Error fetching place details:', error);\n\t\t\t});\n\t\t}\n\t}\n});\n"
  },
  "version": 1,
  "widgetId": "t306uexulu",
  "widgetName": "issueLocationPicker"
}